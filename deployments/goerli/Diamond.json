{
  "address": "0xd2134C52dD1ca07233770B28af5bBa94ceb7640b",
  "abi": [
    {
      "inputs": [],
      "name": "DiamondWritable__InvalidInitializationParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__RemoveTargetNotZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__ReplaceTargetIsIdentical",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorIsImmutable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__SelectorNotSpecified",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DiamondWritable__TargetHasNoCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC165Storage__InvalidInterfaceId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ownable__NotTransitiveOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Proxy__ImplementationIsNotContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeOwnable__NotNomineeOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "DiamondCut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "enum IDiamondWritableInternal.FacetCutAction",
              "name": "action",
              "type": "uint8"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondWritableInternal.FacetCut[]",
          "name": "facetCuts",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "diamondCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "facetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facetAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "facet",
          "type": "address"
        }
      ],
      "name": "facetFunctionSelectors",
      "outputs": [
        {
          "internalType": "bytes4[]",
          "name": "selectors",
          "type": "bytes4[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "facets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes4[]",
              "name": "selectors",
              "type": "bytes4[]"
            }
          ],
          "internalType": "struct IDiamondReadable.Facet[]",
          "name": "diamondFacets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nomineeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackAddress",
          "type": "address"
        }
      ],
      "name": "setFallbackAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd1a506e253c0c9242df3241c39ad643e5faceac61a438c805472e1bca74a750e",
  "receipt": {
    "to": null,
    "from": "0xf5CA36c9873d61Bc28C117BD470981Ef6647A685",
    "contractAddress": "0xd2134C52dD1ca07233770B28af5bBa94ceb7640b",
    "transactionIndex": 128,
    "gasUsed": "2134898",
    "logsBloom": "0x
    "blockHash": "0x8fc881a090f44758a889ee248d9243a347df002d421b5f81e5558af0bddc00e0",
    "transactionHash": "0xd1a506e253c0c9242df3241c39ad643e5faceac61a438c805472e1bca74a750e",
    "logs": [
      {
        "transactionIndex": 128,
        "blockNumber": 8104558,
        "transactionHash": "0xd1a506e253c0c9242df3241c39ad643e5faceac61a438c805472e1bca74a750e",
        "address": "0xd2134C52dD1ca07233770B28af5bBa94ceb7640b",
        "topics": [
          "0x8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d2134c52dd1ca07233770b28af5bba94ceb7640b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000c2c4080590000000000000000000000000000000000000000000000000000000091423765000000000000000000000000000000000000000000000000000000001f931c1c000000000000000000000000000000000000000000000000000000007a0ed62700000000000000000000000000000000000000000000000000000000adfca15e0000000000000000000000000000000000000000000000000000000052ef6b2c00000000000000000000000000000000000000000000000000000000cdffacc60000000000000000000000000000000000000000000000000000000001ffc9a7000000000000000000000000000000000000000000000000000000008da5cb5b000000000000000000000000000000000000000000000000000000008ab5150a00000000000000000000000000000000000000000000000000000000f2fde38b0000000000000000000000000000000000000000000000000000000079ba5097000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 416,
        "blockHash": "0x8fc881a090f44758a889ee248d9243a347df002d421b5f81e5558af0bddc00e0"
      }
    ],
    "blockNumber": 8104558,
    "cumulativeGasUsed": "27672904",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7128d6097e1722349a7cd3ded72bb486",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DiamondWritable__InvalidInitializationParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__RemoveTargetNotZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__ReplaceTargetIsIdentical\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorIsImmutable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__SelectorNotSpecified\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DiamondWritable__TargetHasNoCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC165Storage__InvalidInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ownable__NotTransitiveOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Proxy__ImplementationIsNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeOwnable__NotNomineeOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"indexed\":false,\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"DiamondCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"enum IDiamondWritableInternal.FacetCutAction\",\"name\":\"action\",\"type\":\"uint8\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondWritableInternal.FacetCut[]\",\"name\":\"facetCuts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"diamondCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"facetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facetAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"facet\",\"type\":\"address\"}],\"name\":\"facetFunctionSelectors\",\"outputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"facets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"internalType\":\"struct IDiamondReadable.Facet[]\",\"name\":\"diamondFacets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nomineeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackAddress\",\"type\":\"address\"}],\"name\":\"setFallbackAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"params\":{\"data\":\"optional initialization function call data\",\"facetCuts\":\"array of structured Diamond facet update data\",\"target\":\"optional target of initialization delegatecall\"}},\"facetAddress(bytes4)\":{\"params\":{\"selector\":\"function selector to query\"},\"returns\":{\"facet\":\"facet address (zero address if not found)\"}},\"facetAddresses()\":{\"returns\":{\"addresses\":\"array of facet addresses\"}},\"facetFunctionSelectors(address)\":{\"params\":{\"facet\":\"address of facet to query\"},\"returns\":{\"selectors\":\"array of function selectors\"}},\"facets()\":{\"returns\":{\"diamondFacets\":\"array of structured facet data\"}},\"getFallbackAddress()\":{\"returns\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"owner()\":{\"returns\":{\"_0\":\"conrtact owner\"}},\"setFallbackAddress(address)\":{\"params\":{\"fallbackAddress\":\"address of fallback implementation\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"transferOwnership(address)\":{\"params\":{\"account\":\"address of new owner\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"accept transfer of contract ownership\"},\"diamondCut((address,uint8,bytes4[])[],address,bytes)\":{\"notice\":\"update diamond facets and optionally execute arbitrary initialization function\"},\"facetAddress(bytes4)\":{\"notice\":\"get the address of the facet associated with given selector\"},\"facetAddresses()\":{\"notice\":\"get addresses of all facets used by diamond\"},\"facetFunctionSelectors(address)\":{\"notice\":\"get all selectors for given facet address\"},\"facets()\":{\"notice\":\"get all facets and their selectors\"},\"getFallbackAddress()\":{\"notice\":\"query the address of the fallback implementation\"},\"nomineeOwner()\":{\"notice\":\"get the nominated owner who has permission to call acceptOwnership\"},\"owner()\":{\"notice\":\"get the ERC173 contract owner\"},\"setFallbackAddress(address)\":{\"notice\":\"set the address of the fallback implementation\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"transferOwnership(address)\":{\"notice\":\"transfer contract ownership to new account\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CryptoGrow/Diamond.sol\":\"Diamond\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@solidstate/contracts/access/ownable/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\n\\ninterface IOwnable is IERC173 {}\\n\",\"keccak256\":\"0xd2d21c507ed587cd5de6cc016d4b9c7e956e468108b784455a400301707031c1\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/IOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from '../../interfaces/IERC173Internal.sol';\\n\\ninterface IOwnableInternal is IERC173Internal {\\n    error Ownable__NotOwner();\\n    error Ownable__NotTransitiveOwner();\\n}\\n\",\"keccak256\":\"0x6237a634712261bd82d5c7753780d35f77af215406d1e59512052f743f8f1c60\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable } from './IOwnable.sol';\\n\\ninterface ISafeOwnable is IOwnable {\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function nomineeOwner() external view returns (address);\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x6d321531723ca42e2492dbee44c64c75e454b234bf770f74151819fecdc5870a\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/ISafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\n\\ninterface ISafeOwnableInternal is IOwnableInternal {\\n    error SafeOwnable__NotNomineeOwner();\\n}\\n\",\"keccak256\":\"0xd5d44576a2f82b4ffdcf29feec6043e82436011784d92567a968609aa49a0f6b\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { IOwnable } from './IOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173\\n */\\nabstract contract Ownable is IOwnable, OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC173\\n     */\\n    function transferOwnership(address account) public virtual onlyOwner {\\n        _transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0xd15d2656993862d247115753cf5d7b3c8b58490576b05bfc356276d6523e35a0\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { IOwnableInternal } from './IOwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\n\\nabstract contract OwnableInternal is IOwnableInternal {\\n    using AddressUtils for address;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != _owner()) revert Ownable__NotOwner();\\n        _;\\n    }\\n\\n    modifier onlyTransitiveOwner() {\\n        if (msg.sender != _transitiveOwner())\\n            revert Ownable__NotTransitiveOwner();\\n        _;\\n    }\\n\\n    function _owner() internal view virtual returns (address) {\\n        return OwnableStorage.layout().owner;\\n    }\\n\\n    function _transitiveOwner() internal view virtual returns (address) {\\n        address owner = _owner();\\n\\n        while (owner.isContract()) {\\n            try IERC173(owner).owner() returns (address transitiveOwner) {\\n                owner = transitiveOwner;\\n            } catch {\\n                return owner;\\n            }\\n        }\\n\\n        return owner;\\n    }\\n\\n    function _transferOwnership(address account) internal virtual {\\n        OwnableStorage.layout().setOwner(account);\\n        emit OwnershipTransferred(msg.sender, account);\\n    }\\n}\\n\",\"keccak256\":\"0xe2ae0511fc975d4d7c35e7a336f2aed3f6595edbc624c017844bdfcf443a108b\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/OwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary OwnableStorage {\\n    struct Layout {\\n        address owner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.Ownable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setOwner(Layout storage l, address owner) internal {\\n        l.owner = owner;\\n    }\\n}\\n\",\"keccak256\":\"0xe09e65996cbd1db41f051e265e4261438b0ec08ed385be2b0727a88554dbc192\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Ownable, OwnableStorage } from './Ownable.sol';\\nimport { ISafeOwnable } from './ISafeOwnable.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { SafeOwnableInternal } from './SafeOwnableInternal.sol';\\n\\n/**\\n * @title Ownership access control based on ERC173 with ownership transfer safety check\\n */\\nabstract contract SafeOwnable is ISafeOwnable, Ownable, SafeOwnableInternal {\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function nomineeOwner() public view virtual returns (address) {\\n        return _nomineeOwner();\\n    }\\n\\n    /**\\n     * @inheritdoc ISafeOwnable\\n     */\\n    function acceptOwnership() public virtual onlyNomineeOwner {\\n        _acceptOwnership();\\n    }\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnableInternal) {\\n        super._transferOwnership(account);\\n    }\\n}\\n\",\"keccak256\":\"0x1700bccc1f0ae83d1665f80cfc587326d2cbf13dc2ae3eaebf97c7552e241146\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnableInternal } from './ISafeOwnableInternal.sol';\\nimport { OwnableInternal } from './OwnableInternal.sol';\\nimport { OwnableStorage } from './OwnableStorage.sol';\\nimport { SafeOwnableStorage } from './SafeOwnableStorage.sol';\\n\\nabstract contract SafeOwnableInternal is ISafeOwnableInternal, OwnableInternal {\\n    using OwnableStorage for OwnableStorage.Layout;\\n    using SafeOwnableStorage for SafeOwnableStorage.Layout;\\n\\n    modifier onlyNomineeOwner() {\\n        if (msg.sender != _nomineeOwner())\\n            revert SafeOwnable__NotNomineeOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @notice get the nominated owner who has permission to call acceptOwnership\\n     */\\n    function _nomineeOwner() internal view virtual returns (address) {\\n        return SafeOwnableStorage.layout().nomineeOwner;\\n    }\\n\\n    /**\\n     * @notice accept transfer of contract ownership\\n     */\\n    function _acceptOwnership() internal virtual {\\n        OwnableStorage.Layout storage l = OwnableStorage.layout();\\n        emit OwnershipTransferred(l.owner, msg.sender);\\n        l.setOwner(msg.sender);\\n        SafeOwnableStorage.layout().setNomineeOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice set nominee owner, granting permission to call acceptOwnership\\n     */\\n    function _transferOwnership(address account) internal virtual override {\\n        SafeOwnableStorage.layout().setNomineeOwner(account);\\n    }\\n}\\n\",\"keccak256\":\"0xcb01e0760a9622632912097dd7355c2578261fd2fa1dc06ee9cc431954615d52\",\"license\":\"MIT\"},\"@solidstate/contracts/access/ownable/SafeOwnableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary SafeOwnableStorage {\\n    struct Layout {\\n        address nomineeOwner;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.SafeOwnable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function setNomineeOwner(Layout storage l, address nomineeOwner) internal {\\n        l.nomineeOwner = nomineeOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x90003d0de9e2e18397419d462afc81fa069c39f44ec9f6436266fc98750a8242\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41fd520e7dcfe254d7a2bd9463d661a481c3b55ba4d508c1dcbc071ea7777fba\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC173Internal } from './IERC173Internal.sol';\\n\\n/**\\n * @title Contract ownership standard interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-173\\n */\\ninterface IERC173 is IERC173Internal {\\n    /**\\n     * @notice get the ERC173 contract owner\\n     * @return conrtact owner\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice transfer contract ownership to new account\\n     * @param account address of new owner\\n     */\\n    function transferOwnership(address account) external;\\n}\\n\",\"keccak256\":\"0x9b18a5ad66323c65a81ecd62c3536db99115fe69a30b56a04409de941da7deb6\",\"license\":\"MIT\"},\"@solidstate/contracts/interfaces/IERC173Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC173 interface needed by internal functions\\n */\\ninterface IERC173Internal {\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n}\\n\",\"keccak256\":\"0x9644c3e56c9ecd1763f8aaa437d5d573a7f64a8d93ad7bea1a9c44beb5911b89\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC165 } from '../interfaces/IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x9924bc77de22232561ed01b8f63c011399b3389eb5fd8082746c03c70d67dc64\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nlibrary ERC165Storage {\\n    error ERC165Storage__InvalidInterfaceId();\\n\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId\\n    ) internal view returns (bool) {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        if (interfaceId == 0xffffffff)\\n            revert ERC165Storage__InvalidInterfaceId();\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0xf790cc4cdb51bfa87a5e451b1113c6af80cdc3e7781e17718d5cf246d4ea56ad\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IProxy {\\n    error Proxy__ImplementationIsNotContract();\\n\\n    fallback() external payable;\\n}\\n\",\"keccak256\":\"0x2a06657ce005059e60a0765fe090240732d910fc38de43ca8fd48804bb86c5e4\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { AddressUtils } from '../utils/AddressUtils.sol';\\nimport { IProxy } from './IProxy.sol';\\n\\n/**\\n * @title Base proxy contract\\n */\\nabstract contract Proxy is IProxy {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice delegate all calls to implementation contract\\n     * @dev reverts if implementation address contains no code, for compatibility with metamorphic contracts\\n     * @dev memory location in use by assembly may be unsafe in other contexts\\n     */\\n    fallback() external payable virtual {\\n        address implementation = _getImplementation();\\n\\n        if (!implementation.isContract())\\n            revert Proxy__ImplementationIsNotContract();\\n\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice get logic implementation address\\n     * @return implementation address\\n     */\\n    function _getImplementation() internal virtual returns (address);\\n}\\n\",\"keccak256\":\"0x4d6ba63d71b8cddb57746d564cc904931d1ee479052a19f902787417ee5d97a8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/ISolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { ISafeOwnable } from '../../access/ownable/ISafeOwnable.sol';\\nimport { IERC165 } from '../../interfaces/IERC165.sol';\\nimport { IDiamondBase } from './base/IDiamondBase.sol';\\nimport { IDiamondFallback } from './fallback/IDiamondFallback.sol';\\nimport { IDiamondReadable } from './readable/IDiamondReadable.sol';\\nimport { IDiamondWritable } from './writable/IDiamondWritable.sol';\\n\\ninterface ISolidStateDiamond is\\n    IDiamondBase,\\n    IDiamondFallback,\\n    IDiamondReadable,\\n    IDiamondWritable,\\n    ISafeOwnable,\\n    IERC165\\n{\\n    receive() external payable;\\n}\\n\",\"keccak256\":\"0x541fe148acc6b9331149498d6f66308761a650da10c9bd8f9e933bdfec52f730\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IOwnable, Ownable, OwnableInternal, OwnableStorage } from '../../access/ownable/Ownable.sol';\\nimport { ISafeOwnable, SafeOwnable } from '../../access/ownable/SafeOwnable.sol';\\nimport { IERC173 } from '../../interfaces/IERC173.sol';\\nimport { ERC165, IERC165, ERC165Storage } from '../../introspection/ERC165.sol';\\nimport { DiamondBase, DiamondBaseStorage } from './base/DiamondBase.sol';\\nimport { DiamondFallback, IDiamondFallback } from './fallback/DiamondFallback.sol';\\nimport { DiamondReadable, IDiamondReadable } from './readable/DiamondReadable.sol';\\nimport { DiamondWritable, IDiamondWritable } from './writable/DiamondWritable.sol';\\nimport { ISolidStateDiamond } from './ISolidStateDiamond.sol';\\n\\n/**\\n * @title SolidState \\\"Diamond\\\" proxy reference implementation\\n */\\nabstract contract SolidStateDiamond is\\n    ISolidStateDiamond,\\n    DiamondBase,\\n    DiamondFallback,\\n    DiamondReadable,\\n    DiamondWritable,\\n    SafeOwnable,\\n    ERC165\\n{\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n    using ERC165Storage for ERC165Storage.Layout;\\n    using OwnableStorage for OwnableStorage.Layout;\\n\\n    constructor() {\\n        ERC165Storage.Layout storage erc165 = ERC165Storage.layout();\\n        bytes4[] memory selectors = new bytes4[](12);\\n        uint256 selectorIndex;\\n\\n        // register DiamondFallback\\n\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .getFallbackAddress\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondFallback\\n            .setFallbackAddress\\n            .selector;\\n\\n        erc165.setSupportedInterface(type(IDiamondFallback).interfaceId, true);\\n\\n        // register DiamondWritable\\n\\n        selectors[selectorIndex++] = IDiamondWritable.diamondCut.selector;\\n\\n        erc165.setSupportedInterface(type(IDiamondWritable).interfaceId, true);\\n\\n        // register DiamondReadable\\n\\n        selectors[selectorIndex++] = IDiamondReadable.facets.selector;\\n        selectors[selectorIndex++] = IDiamondReadable\\n            .facetFunctionSelectors\\n            .selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddresses.selector;\\n        selectors[selectorIndex++] = IDiamondReadable.facetAddress.selector;\\n\\n        erc165.setSupportedInterface(type(IDiamondReadable).interfaceId, true);\\n\\n        // register ERC165\\n\\n        selectors[selectorIndex++] = IERC165.supportsInterface.selector;\\n\\n        erc165.setSupportedInterface(type(IERC165).interfaceId, true);\\n\\n        // register SafeOwnable\\n\\n        selectors[selectorIndex++] = Ownable.owner.selector;\\n        selectors[selectorIndex++] = SafeOwnable.nomineeOwner.selector;\\n        selectors[selectorIndex++] = Ownable.transferOwnership.selector;\\n        selectors[selectorIndex++] = SafeOwnable.acceptOwnership.selector;\\n\\n        erc165.setSupportedInterface(type(IERC173).interfaceId, true);\\n\\n        // diamond cut\\n\\n        FacetCut[] memory facetCuts = new FacetCut[](1);\\n\\n        facetCuts[0] = FacetCut({\\n            target: address(this),\\n            action: FacetCutAction.ADD,\\n            selectors: selectors\\n        });\\n\\n        _diamondCut(facetCuts, address(0), '');\\n\\n        // set owner\\n\\n        OwnableStorage.layout().setOwner(msg.sender);\\n    }\\n\\n    receive() external payable {}\\n\\n    function _transferOwnership(\\n        address account\\n    ) internal virtual override(OwnableInternal, SafeOwnable) {\\n        super._transferOwnership(account);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondFallback\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        override(DiamondBase, DiamondFallback)\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x06957aa8a1ebbc94a924e47eb0c63d870b847c66b22d87bdfe72949df32ebf61\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { Proxy } from '../../Proxy.sol';\\nimport { IDiamondBase } from './IDiamondBase.sol';\\nimport { DiamondBaseStorage } from './DiamondBaseStorage.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy base contract\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\nabstract contract DiamondBase is IDiamondBase, Proxy {\\n    /**\\n     * @inheritdoc Proxy\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        // inline storage layout retrieval uses less gas\\n        DiamondBaseStorage.Layout storage l;\\n        bytes32 slot = DiamondBaseStorage.STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n\\n        implementation = address(bytes20(l.facets[msg.sig]));\\n    }\\n}\\n\",\"keccak256\":\"0x6712d6c7bee937ac07ee00eeaa30895634fbd3cda7f5b5c179a2331ad05623df\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/DiamondBaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nlibrary DiamondBaseStorage {\\n    struct Layout {\\n        // function selector => (facet address, selector slot position)\\n        mapping(bytes4 => bytes32) facets;\\n        // total number of selectors registered\\n        uint16 selectorCount;\\n        // array of selector slots with 8 selectors per slot\\n        mapping(uint256 => bytes32) selectorSlots;\\n        address fallbackAddress;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.DiamondBase');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x74365666c0e9917d742bbab21e174dea6bc6ccf6146153e43dd9d9fe8417a36a\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/base/IDiamondBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IProxy } from \\\"../../IProxy.sol\\\";\\n\\ninterface IDiamondBase is IProxy {}\\n\",\"keccak256\":\"0x504a8178bad8fcb987f047eabffc6a03894a806f734a5e2defd26651250c1ad9\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/DiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBase } from '../base/DiamondBase.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondFallback } from './IDiamondFallback.sol';\\n\\n// TODO: DiamondFallback interface\\n\\n/**\\n * @title Fallback feature for EIP-2535 \\\"Diamond\\\" proxy\\n */\\nabstract contract DiamondFallback is\\n    IDiamondFallback,\\n    OwnableInternal,\\n    DiamondBase\\n{\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = _getFallbackAddress();\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondFallback\\n     */\\n    function setFallbackAddress(address fallbackAddress) external onlyOwner {\\n        _setFallbackAddress(fallbackAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc DiamondBase\\n     * @notice query custom fallback address is no implementation is found\\n     */\\n    function _getImplementation()\\n        internal\\n        view\\n        virtual\\n        override\\n        returns (address implementation)\\n    {\\n        implementation = super._getImplementation();\\n\\n        if (implementation == address(0)) {\\n            implementation = _getFallbackAddress();\\n        }\\n    }\\n\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function _getFallbackAddress()\\n        internal\\n        view\\n        virtual\\n        returns (address fallbackAddress)\\n    {\\n        fallbackAddress = DiamondBaseStorage.layout().fallbackAddress;\\n    }\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function _setFallbackAddress(address fallbackAddress) internal virtual {\\n        DiamondBaseStorage.layout().fallbackAddress = fallbackAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x22b541ba05979a4decc7c2f191aac3d873e44171fd1c3cbcca55e45651eaf024\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/fallback/IDiamondFallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondBase } from \\\"../base/IDiamondBase.sol\\\";\\n\\ninterface IDiamondFallback is IDiamondBase {\\n    /**\\n     * @notice query the address of the fallback implementation\\n     * @return fallbackAddress address of fallback implementation\\n     */\\n    function getFallbackAddress()\\n        external\\n        view\\n        returns (address fallbackAddress);\\n\\n    /**\\n     * @notice set the address of the fallback implementation\\n     * @param fallbackAddress address of fallback implementation\\n     */\\n    function setFallbackAddress(address fallbackAddress) external;\\n}\\n\",\"keccak256\":\"0x77d647fdbd282cce8c7d0d6c786dadad6f8f51846249cb4ffbd21d3ed056fbe8\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/DiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondReadable } from './IDiamondReadable.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy introspection contract\\n * @dev derived from https://github.com/mudgen/diamond-2 (MIT license)\\n */\\nabstract contract DiamondReadable is IDiamondReadable {\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        diamondFacets = new Facet[](l.selectorCount);\\n\\n        uint8[] memory numFacetSelectors = new uint8[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (diamondFacets[facetIndex].target == facet) {\\n                        diamondFacets[facetIndex].selectors[\\n                            numFacetSelectors[facetIndex]\\n                        ] = selector;\\n                        // probably will never have more than 256 functions from one facet contract\\n                        require(numFacetSelectors[facetIndex] < 255);\\n                        numFacetSelectors[facetIndex]++;\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                diamondFacets[numFacets].target = facet;\\n                diamondFacets[numFacets].selectors = new bytes4[](\\n                    l.selectorCount\\n                );\\n                diamondFacets[numFacets].selectors[0] = selector;\\n                numFacetSelectors[numFacets] = 1;\\n                numFacets++;\\n            }\\n        }\\n\\n        for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n            uint256 numSelectors = numFacetSelectors[facetIndex];\\n            bytes4[] memory selectors = diamondFacets[facetIndex].selectors;\\n\\n            // setting the number of selectors\\n            assembly {\\n                mstore(selectors, numSelectors)\\n            }\\n        }\\n\\n        // setting the number of facets\\n        assembly {\\n            mstore(diamondFacets, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors) {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        selectors = new bytes4[](l.selectorCount);\\n\\n        uint256 numSelectors;\\n        uint256 selectorIndex;\\n\\n        // loop through function selectors\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n\\n                if (facet == address(bytes20(l.facets[selector]))) {\\n                    selectors[numSelectors] = selector;\\n                    numSelectors++;\\n                }\\n            }\\n        }\\n\\n        // set the number of selectors in the array\\n        assembly {\\n            mstore(selectors, numSelectors)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses)\\n    {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        addresses = new address[](l.selectorCount);\\n        uint256 numFacets;\\n        uint256 selectorIndex;\\n\\n        for (uint256 slotIndex; selectorIndex < l.selectorCount; slotIndex++) {\\n            bytes32 slot = l.selectorSlots[slotIndex];\\n\\n            for (\\n                uint256 selectorSlotIndex;\\n                selectorSlotIndex < 8;\\n                selectorSlotIndex++\\n            ) {\\n                selectorIndex++;\\n\\n                if (selectorIndex > l.selectorCount) {\\n                    break;\\n                }\\n\\n                bytes4 selector = bytes4(slot << (selectorSlotIndex << 5));\\n                address facet = address(bytes20(l.facets[selector]));\\n\\n                bool continueLoop;\\n\\n                for (uint256 facetIndex; facetIndex < numFacets; facetIndex++) {\\n                    if (facet == addresses[facetIndex]) {\\n                        continueLoop = true;\\n                        break;\\n                    }\\n                }\\n\\n                if (continueLoop) {\\n                    continue;\\n                }\\n\\n                addresses[numFacets] = facet;\\n                numFacets++;\\n            }\\n        }\\n\\n        // set the number of facet addresses in the array\\n        assembly {\\n            mstore(addresses, numFacets)\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDiamondReadable\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet) {\\n        facet = address(bytes20(DiamondBaseStorage.layout().facets[selector]));\\n    }\\n}\\n\",\"keccak256\":\"0x03fd06c9bd8642a42ece1d9f75c9e99869a06f4310fa9fe80df924ff68984036\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/readable/IDiamondReadable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Diamond proxy introspection interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondReadable {\\n    struct Facet {\\n        address target;\\n        bytes4[] selectors;\\n    }\\n\\n    /**\\n     * @notice get all facets and their selectors\\n     * @return diamondFacets array of structured facet data\\n     */\\n    function facets() external view returns (Facet[] memory diamondFacets);\\n\\n    /**\\n     * @notice get all selectors for given facet address\\n     * @param facet address of facet to query\\n     * @return selectors array of function selectors\\n     */\\n    function facetFunctionSelectors(\\n        address facet\\n    ) external view returns (bytes4[] memory selectors);\\n\\n    /**\\n     * @notice get addresses of all facets used by diamond\\n     * @return addresses array of facet addresses\\n     */\\n    function facetAddresses()\\n        external\\n        view\\n        returns (address[] memory addresses);\\n\\n    /**\\n     * @notice get the address of the facet associated with given selector\\n     * @param selector function selector to query\\n     * @return facet facet address (zero address if not found)\\n     */\\n    function facetAddress(\\n        bytes4 selector\\n    ) external view returns (address facet);\\n}\\n\",\"keccak256\":\"0xe3536079514a210e74f6e93b62525d451ed75c50c82773f9574c24e886ebe1ed\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { OwnableInternal } from '../../../access/ownable/OwnableInternal.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritable } from './IDiamondWritable.sol';\\nimport { DiamondWritableInternal } from './DiamondWritableInternal.sol';\\n\\n/**\\n * @title EIP-2535 \\\"Diamond\\\" proxy update contract\\n */\\nabstract contract DiamondWritable is\\n    IDiamondWritable,\\n    DiamondWritableInternal,\\n    OwnableInternal\\n{\\n    using DiamondBaseStorage for DiamondBaseStorage.Layout;\\n\\n    /**\\n     * @inheritdoc IDiamondWritable\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external onlyOwner {\\n        _diamondCut(facetCuts, target, data);\\n    }\\n}\\n\",\"keccak256\":\"0x8338b4994406454601a5f24c2df58968e03a8126e5d7ec2cf649bce09ea8cf4f\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/DiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { DiamondBaseStorage } from '../base/DiamondBaseStorage.sol';\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\nabstract contract DiamondWritableInternal is IDiamondWritableInternal {\\n    using AddressUtils for address;\\n\\n    bytes32 private constant CLEAR_ADDRESS_MASK =\\n        bytes32(uint256(0xffffffffffffffffffffffff));\\n    bytes32 private constant CLEAR_SELECTOR_MASK =\\n        bytes32(uint256(0xffffffff << 224));\\n\\n    /**\\n     * @notice update functions callable on Diamond proxy\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional recipient of initialization delegatecall\\n     * @param data optional initialization call data\\n     */\\n    function _diamondCut(\\n        FacetCut[] memory facetCuts,\\n        address target,\\n        bytes memory data\\n    ) internal {\\n        DiamondBaseStorage.Layout storage l = DiamondBaseStorage.layout();\\n\\n        unchecked {\\n            uint256 originalSelectorCount = l.selectorCount;\\n            uint256 selectorCount = originalSelectorCount;\\n            bytes32 selectorSlot;\\n\\n            // Check if last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                // get last selectorSlot\\n                selectorSlot = l.selectorSlots[selectorCount >> 3];\\n            }\\n\\n            for (uint256 i; i < facetCuts.length; i++) {\\n                FacetCut memory facetCut = facetCuts[i];\\n                FacetCutAction action = facetCut.action;\\n\\n                if (facetCut.selectors.length == 0)\\n                    revert DiamondWritable__SelectorNotSpecified();\\n\\n                if (action == FacetCutAction.ADD) {\\n                    (selectorCount, selectorSlot) = _addFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                } else if (action == FacetCutAction.REPLACE) {\\n                    _replaceFacetSelectors(l, facetCut);\\n                } else if (action == FacetCutAction.REMOVE) {\\n                    (selectorCount, selectorSlot) = _removeFacetSelectors(\\n                        l,\\n                        selectorCount,\\n                        selectorSlot,\\n                        facetCut\\n                    );\\n                }\\n            }\\n\\n            if (selectorCount != originalSelectorCount) {\\n                l.selectorCount = uint16(selectorCount);\\n            }\\n\\n            // If last selector slot is not full\\n            if (selectorCount & 7 > 0) {\\n                l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n            }\\n\\n            emit DiamondCut(facetCuts, target, data);\\n            _initialize(target, data);\\n        }\\n    }\\n\\n    function _addFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (\\n                facetCut.target != address(this) &&\\n                !facetCut.target.isContract()\\n            ) revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) != address(0))\\n                    revert DiamondWritable__SelectorAlreadyAdded();\\n\\n                // add facet for selector\\n                l.facets[selector] =\\n                    bytes20(facetCut.target) |\\n                    bytes32(selectorCount);\\n                uint256 selectorInSlotPosition = (selectorCount & 7) << 5;\\n\\n                // clear selector position in slot and add selector\\n                selectorSlot =\\n                    (selectorSlot &\\n                        ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) |\\n                    (bytes32(selector) >> selectorInSlotPosition);\\n\\n                // if slot is full then write it to storage\\n                if (selectorInSlotPosition == 224) {\\n                    l.selectorSlots[selectorCount >> 3] = selectorSlot;\\n                    selectorSlot = 0;\\n                }\\n\\n                selectorCount++;\\n            }\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _removeFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        uint256 selectorCount,\\n        bytes32 selectorSlot,\\n        FacetCut memory facetCut\\n    ) internal returns (uint256, bytes32) {\\n        unchecked {\\n            if (facetCut.target != address(0))\\n                revert DiamondWritable__RemoveTargetNotZeroAddress();\\n\\n            uint256 selectorSlotCount = selectorCount >> 3;\\n            uint256 selectorInSlotIndex = selectorCount & 7;\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n\\n                if (address(bytes20(oldFacet)) == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n\\n                if (address(bytes20(oldFacet)) == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n\\n                if (selectorSlot == 0) {\\n                    selectorSlotCount--;\\n                    selectorSlot = l.selectorSlots[selectorSlotCount];\\n                    selectorInSlotIndex = 7;\\n                } else {\\n                    selectorInSlotIndex--;\\n                }\\n\\n                bytes4 lastSelector;\\n                uint256 oldSelectorsSlotCount;\\n                uint256 oldSelectorInSlotPosition;\\n\\n                // adding a block here prevents stack too deep error\\n                {\\n                    // replace selector with last selector in l.facets\\n                    lastSelector = bytes4(\\n                        selectorSlot << (selectorInSlotIndex << 5)\\n                    );\\n\\n                    if (lastSelector != selector) {\\n                        // update last selector slot position info\\n                        l.facets[lastSelector] =\\n                            (oldFacet & CLEAR_ADDRESS_MASK) |\\n                            bytes20(l.facets[lastSelector]);\\n                    }\\n\\n                    delete l.facets[selector];\\n                    uint256 oldSelectorCount = uint16(uint256(oldFacet));\\n                    oldSelectorsSlotCount = oldSelectorCount >> 3;\\n                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;\\n                }\\n\\n                if (oldSelectorsSlotCount != selectorSlotCount) {\\n                    bytes32 oldSelectorSlot = l.selectorSlots[\\n                        oldSelectorsSlotCount\\n                    ];\\n\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    oldSelectorSlot =\\n                        (oldSelectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n\\n                    // update storage with the modified slot\\n                    l.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;\\n                } else {\\n                    // clears the selector we are deleting and puts the last selector in its place.\\n                    selectorSlot =\\n                        (selectorSlot &\\n                            ~(CLEAR_SELECTOR_MASK >>\\n                                oldSelectorInSlotPosition)) |\\n                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);\\n                }\\n\\n                if (selectorInSlotIndex == 0) {\\n                    delete l.selectorSlots[selectorSlotCount];\\n                    selectorSlot = 0;\\n                }\\n            }\\n\\n            selectorCount = (selectorSlotCount << 3) | selectorInSlotIndex;\\n\\n            return (selectorCount, selectorSlot);\\n        }\\n    }\\n\\n    function _replaceFacetSelectors(\\n        DiamondBaseStorage.Layout storage l,\\n        FacetCut memory facetCut\\n    ) internal {\\n        unchecked {\\n            if (!facetCut.target.isContract())\\n                revert DiamondWritable__TargetHasNoCode();\\n\\n            for (uint256 i; i < facetCut.selectors.length; i++) {\\n                bytes4 selector = facetCut.selectors[i];\\n                bytes32 oldFacet = l.facets[selector];\\n                address oldFacetAddress = address(bytes20(oldFacet));\\n\\n                if (oldFacetAddress == address(0))\\n                    revert DiamondWritable__SelectorNotFound();\\n                if (oldFacetAddress == address(this))\\n                    revert DiamondWritable__SelectorIsImmutable();\\n                if (oldFacetAddress == facetCut.target)\\n                    revert DiamondWritable__ReplaceTargetIsIdentical();\\n\\n                // replace old facet address\\n                l.facets[selector] =\\n                    (oldFacet & CLEAR_ADDRESS_MASK) |\\n                    bytes20(facetCut.target);\\n            }\\n        }\\n    }\\n\\n    function _initialize(address target, bytes memory data) private {\\n        if ((target == address(0)) != (data.length == 0))\\n            revert DiamondWritable__InvalidInitializationParameters();\\n\\n        if (target != address(0)) {\\n            if (target != address(this)) {\\n                if (!target.isContract())\\n                    revert DiamondWritable__TargetHasNoCode();\\n            }\\n\\n            (bool success, ) = target.delegatecall(data);\\n\\n            if (!success) {\\n                assembly {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9bc52044616cc2058d15aa07455f9ab4a2d6b0cb4bd542d6b5b8df092b501387\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IDiamondWritableInternal } from './IDiamondWritableInternal.sol';\\n\\n/**\\n * @title Diamond proxy upgrade interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-2535\\n */\\ninterface IDiamondWritable is IDiamondWritableInternal {\\n    /**\\n     * @notice update diamond facets and optionally execute arbitrary initialization function\\n     * @param facetCuts array of structured Diamond facet update data\\n     * @param target optional target of initialization delegatecall\\n     * @param data optional initialization function call data\\n     */\\n    function diamondCut(\\n        FacetCut[] calldata facetCuts,\\n        address target,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3d7dd0fa5d4cef8889d507880fe68d0b1558f6c21c5855170c44ef7e2b05bcef\",\"license\":\"MIT\"},\"@solidstate/contracts/proxy/diamond/writable/IDiamondWritableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\ninterface IDiamondWritableInternal {\\n    enum FacetCutAction {\\n        ADD,\\n        REPLACE,\\n        REMOVE\\n    }\\n\\n    event DiamondCut(FacetCut[] facetCuts, address target, bytes data);\\n\\n    error DiamondWritable__InvalidInitializationParameters();\\n    error DiamondWritable__RemoveTargetNotZeroAddress();\\n    error DiamondWritable__ReplaceTargetIsIdentical();\\n    error DiamondWritable__SelectorAlreadyAdded();\\n    error DiamondWritable__SelectorIsImmutable();\\n    error DiamondWritable__SelectorNotFound();\\n    error DiamondWritable__SelectorNotSpecified();\\n    error DiamondWritable__TargetHasNoCode();\\n\\n    struct FacetCut {\\n        address target;\\n        FacetCutAction action;\\n        bytes4[] selectors;\\n    }\\n}\\n\",\"keccak256\":\"0x82e0eeb28c8b8bd1ee9c5dd3247fa3d4062d5c6d43061833714c88741ecb5605\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7d924db4dbd9210923ab08db77db3c77438014c255fd49fa208ebce283d991bf\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5aaeaea22a0800402c6f2d8ce6185293bc64f74f6c390c1b1c53b624b43972f8\",\"license\":\"MIT\"},\"contracts/CryptoGrow/Diamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {SolidStateDiamond} from \\\"@solidstate/contracts/proxy/diamond/SolidStateDiamond.sol\\\";\\n\\ncontract Diamond is SolidStateDiamond {}\\n\",\"keccak256\":\"0x047cb1adbc42e03431f65185f92e79711f9853e4802b17bdf963ff3c0164ad48\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506000620000296200050060201b62000bb31760201c565b60408051600c8082526101a082019092529192506000919060208201610180803683370190505090506000632c40805960e01b8282620000698162000dae565b9350815181106200007e576200007e62000dd8565b6001600160e01b031990921660209283029190910190910152639142376560e01b8282620000ac8162000dae565b935081518110620000c157620000c162000dd8565b6001600160e01b0319909216602092830291909101820152620000fb908490632f40adcf60e21b9060019062000bd762000524821b17901c565b6307e4c70760e21b8282620001108162000dae565b93508151811062000125576200012562000dd8565b6001600160e01b03199092166020928302919091018201526200015f9084906307e4c70760e21b9060019062000bd762000524821b17901c565b637a0ed62760e01b8282620001748162000dae565b93508151811062000189576200018962000dd8565b6001600160e01b0319909216602092830291909101909101526356fe50af60e11b8282620001b78162000dae565b935081518110620001cc57620001cc62000dd8565b6001600160e01b0319909216602092830291909101909101526314bbdacb60e21b8282620001fa8162000dae565b9350815181106200020f576200020f62000dd8565b6001600160e01b0319909216602092830291909101909101526366ffd66360e11b82826200023d8162000dae565b93508151811062000252576200025262000dd8565b6001600160e01b03199092166020928302919091018201526200028c9084906348e2b09360e01b9060019062000bd762000524821b17901c565b6301ffc9a760e01b8282620002a18162000dae565b935081518110620002b657620002b662000dd8565b6001600160e01b0319909216602092830291909101820152620002f09084906301ffc9a760e01b9060019062000bd762000524821b17901c565b638da5cb5b60e01b8282620003058162000dae565b9350815181106200031a576200031a62000dd8565b6001600160e01b03199092166020928302919091019091015263455a8a8560e11b8282620003488162000dae565b9350815181106200035d576200035d62000dd8565b6001600160e01b03199092166020928302919091019091015263f2fde38b60e01b82826200038b8162000dae565b935081518110620003a057620003a062000dd8565b6001600160e01b0319909216602092830291909101909101526379ba509760e01b8282620003ce8162000dae565b935081518110620003e357620003e362000dd8565b6001600160e01b03199092166020928302919091018201526200041d9084906307f5828d60e41b9060019062000bd762000524821b17901c565b604080516001808252818301909252600091816020015b6040805160608082018352600080835260208301529181019190915281526020019060019003908162000434579050506040805160608101909152308152909150602081016000815260200184815250816000815181106200049a576200049a62000dd8565b6020026020010181905250620004c8816000604051806020016040528060008152506200057e60201b60201c565b620004f633620004e26200075e60201b62000c301760201c565b6200078260201b62000c541790919060201c565b5050505062000f8a565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b03198083161415620005505760405163f31e8ca960e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6000620005956200079f60201b62000c711760201c565b600181015490915061ffff811690819060009060071615620005c95750600381901c60009081526002840160205260409020545b60005b8751811015620006cc576000888281518110620005ed57620005ed62000dd8565b6020026020010151905060008160200151905081604001515160001415620006285760405163eb6c3aeb60e01b815260040160405180910390fd5b60008160028111156200063f576200063f62000dee565b14156200065f576200065487868685620007c3565b9095509350620006c1565b600181600281111562000676576200067662000dee565b14156200068f5762000689878362000922565b620006c1565b6002816002811115620006a657620006a662000dee565b1415620006c157620006bb8786868562000a81565b90955093505b5050600101620005cc565b50828214620006e95760018401805461ffff191661ffff84161790555b60078216156200070c57600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051620007419392919062000e65565b60405180910390a162000755868662000ca7565b50505050505050565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b805160009081906001600160a01b031630148015906200080357506200080183600001516001600160a01b031662000da860201b620002ad1760201c565b155b156200082257604051633ddc5cab60e21b815260040160405180910390fd5b60005b83604001515181101562000915576000846040015182815181106200084e576200084e62000dd8565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c156200089b57604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c199990991617978114156200090557600389901c600090815260028b0160205260408120989098555b5050506001958601950162000825565b5093959294509192505050565b6200094581600001516001600160a01b031662000da860201b620002ad1760201c565b6200096357604051633ddc5cab60e21b815260040160405180910390fd5b60005b81604001515181101562000a7c576000826040015182815181106200098f576200098f62000dd8565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c80620009dc576040516337e25a9760e11b815260040160405180910390fd5b6001600160a01b03811630141562000a075760405163e983573160e01b815260040160405180910390fd5b84516001600160a01b038281169116141562000a36576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166001600160601b039190911617905560010162000966565b505050565b805160009081906001600160a01b03161562000ab057604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101562000c935760008660400151828151811062000ae55762000ae562000dd8565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c62000b31576040516337e25a9760e11b815260040160405180910390fd5b606081901c30141562000b575760405163e983573160e01b815260040160405180910390fd5b8862000b8157600019909401600081815260028c0160205260409020549850936007935062000b89565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161462000bdc576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166001600160601b0386161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b1687821462000c4157600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c17905562000c65565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8662000c8157600088815260028f01602052604081208190559b505b50506001909301925062000abc915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151462000cd4576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b0382161562000da4576001600160a01b038216301462000d325762000d14826001600160a01b031662000da860201b620002ad1760201c565b62000d3257604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b03168260405162000d4e919062000f6c565b600060405180830381855af49150503d806000811462000d8b576040519150601f19603f3d011682016040523d82523d6000602084013e62000d90565b606091505b505090508062000a7c573d6000803e3d6000fd5b5050565b3b151590565b600060001982141562000dd157634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60005b8381101562000e2157818101518382015260200162000e07565b8381111562000e31576000848401525b50505050565b6000815180845262000e5181602086016020860162000e04565b601f01601f19169290920160200192915050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b0160005b8481101562000f3a57898403607f19018652815180516001600160a01b0316855283810151898601906003811062000ed657634e487b7160e01b600052602160045260246000fd5b868601526040918201519186018a905281519081905290840190600090898701905b8083101562000f245783516001600160e01b031916825292860192600192909201919086019062000ef8565b5097850197955050509082019060010162000e8e565b50506001600160a01b038a1690880152868103604088015262000f5e818962000e37565b9a9950505050505050505050565b6000825162000f8081846020870162000e04565b9190910192915050565b611bce8062000f9a6000396000f3fe6080604052600436106100ab5760003560e01c80638ab5150a116100645780638ab5150a146101e75780638da5cb5b146101fc5780639142376514610211578063adfca15e14610231578063cdffacc61461025e578063f2fde38b1461027e576100b2565b806301ffc9a71461010a5780631f931c1c1461013f5780632c4080591461016157806352ef6b2c1461018e57806379ba5097146101b05780637a0ed627146101c5576100b2565b366100b257005b60006100bc61029e565b90506001600160a01b0381163b6100e6576040516321f27f0d60e21b815260040160405180910390fd5b3660008037600080366000845af43d6000803e808015610105573d6000f35b3d6000fd5b34801561011657600080fd5b5061012a610125366004611572565b6102b3565b60405190151581526020015b60405180910390f35b34801561014b57600080fd5b5061015f61015a3660046115f4565b6102e8565b005b34801561016d57600080fd5b50610176610372565b6040516001600160a01b039091168152602001610136565b34801561019a57600080fd5b506101a361037c565b60405161013691906116a6565b3480156101bc57600080fd5b5061015f610526565b3480156101d157600080fd5b506101da610569565b6040516101369190611738565b3480156101f357600080fd5b50610176610998565b34801561020857600080fd5b506101766109a2565b34801561021d57600080fd5b5061015f61022c3660046117b5565b6109ac565b34801561023d57600080fd5b5061025161024c3660046117b5565b6109f1565b60405161013691906117d0565b34801561026a57600080fd5b50610176610279366004611572565b610b44565b34801561028a57600080fd5b5061015f6102993660046117b5565b610b71565b60006102a8610c95565b905090565b3b151590565b60006102e2826102c1610bb3565b906001600160e01b0319166000908152602091909152604090205460ff1690565b92915050565b6102f0610ce1565b6001600160a01b0316336001600160a01b03161461032157604051632f7a8ee160e01b815260040160405180910390fd5b61036b61032e85876118a6565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cfa92505050565b5050505050565b60006102a8610eac565b60606000610388610c71565b600181015490915061ffff1667ffffffffffffffff8111156103ac576103ac611812565b6040519080825280602002602001820160405280156103d5578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561051e576000818152600285016020526040812054905b60088110156105095783610414816119f0565b600188015490955061ffff16851115905061042e57610509565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156104ac578a818151811061047057610470611a0b565b60200260200101516001600160a01b0316836001600160a01b0316141561049a57600191506104ac565b806104a4816119f0565b915050610456565b5080156104bb575050506104f7565b818a89815181106104ce576104ce611a0b565b6001600160a01b0390921660209283029190910190910152876104f0816119f0565b9850505050505b80610501816119f0565b915050610401565b50508080610516906119f0565b9150506103de565b505082525090565b61052e610ec8565b6001600160a01b0316336001600160a01b03161461055f5760405163efd1052d60e01b815260040160405180910390fd5b610567610ef0565b565b60606000610575610c71565b600181015490915061ffff1667ffffffffffffffff81111561059957610599611812565b6040519080825280602002602001820160405280156105df57816020015b6040805180820190915260008152606060208201528152602001906001900390816105b75790505b50600182015490925060009061ffff1667ffffffffffffffff81111561060757610607611812565b604051908082528060200260200182016040528015610630578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610926576000818152600286016020526040812054905b6008811015610911578361066f816119f0565b600189015490955061ffff16851115905061068957610911565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156107cf57826001600160a01b03168c82815181106106d5576106d5611a0b565b6020026020010151600001516001600160a01b031614156107bd57838c828151811061070357610703611a0b565b6020026020010151602001518b838151811061072157610721611a0b565b602002602001015160ff168151811061073c5761073c611a0b565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061077257610772611a0b565b602002602001015160ff161061078757600080fd5b89818151811061079957610799611a0b565b6020026020010180518091906107ae90611a21565b60ff16905250600191506107cf565b806107c7816119f0565b9150506106b1565b5080156107de575050506108ff565b818b89815181106107f1576107f1611a0b565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561082a5761082a611812565b604051908082528060200260200182016040528015610853578160200160208202803683370190505b508b898151811061086657610866611a0b565b602002602001015160200181905250828b898151811061088857610888611a0b565b6020026020010151602001516000815181106108a6576108a6611a0b565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106108dc576108dc611a0b565b60ff90921660209283029190910190910152876108f8816119f0565b9850505050505b80610909816119f0565b91505061065c565b5050808061091e906119f0565b915050610639565b5060005b8281101561098d57600084828151811061094657610946611a0b565b602002602001015160ff169050600087838151811061096757610967611a0b565b602002602001015160200151905081815250508080610985906119f0565b91505061092a565b508185525050505090565b60006102a8610ec8565b60006102a8610ce1565b6109b4610ce1565b6001600160a01b0316336001600160a01b0316146109e557604051632f7a8ee160e01b815260040160405180910390fd5b6109ee81610f6d565b50565b606060006109fd610c71565b600181015490915061ffff1667ffffffffffffffff811115610a2157610a21611812565b604051908082528060200260200182016040528015610a4a578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610b3a576000818152600285016020526040812054905b6008811015610b255783610a89816119f0565b600188015490955061ffff168511159050610aa357610b25565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a161415610b125780888781518110610aeb57610aeb611a0b565b6001600160e01b03199092166020928302919091019091015285610b0e816119f0565b9650505b5080610b1d816119f0565b915050610a76565b50508080610b32906119f0565b915050610a53565b5050825250919050565b6000610b4e610c71565b6001600160e01b0319909216600090815260209290925250604090205460601c90565b610b79610ce1565b6001600160a01b0316336001600160a01b031614610baa57604051632f7a8ee160e01b815260040160405180910390fd5b6109ee81610f9a565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b03198083161415610c025760405163f31e8ca960e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c80610cde576102a8610eac565b90565b6000610ceb610c30565b546001600160a01b0316919050565b6000610d04610c71565b600181015490915061ffff811690819060009060071615610d375750600381901c60009081526002840160205260409020545b60005b8751811015610e20576000888281518110610d5757610d57611a0b565b6020026020010151905060008160200151905081604001515160001415610d915760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115610da557610da5611a41565b1415610dc157610db787868685610fa3565b9095509350610e16565b6001816002811115610dd557610dd5611a41565b1415610dea57610de587836110e2565b610e16565b6002816002811115610dfe57610dfe611a41565b1415610e1657610e1087868685611226565b90955093505b5050600101610d3a565b50828214610e3c5760018401805461ffff191661ffff84161790555b6007821615610e5e57600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051610e9193929190611ab3565b60405180910390a1610ea38686611443565b50505050505050565b6000610eb6610c71565b600301546001600160a01b0316919050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610ceb565b6000610efa610c30565b805460405191925033916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3610f408133610c54565b6109ee60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce66178905b90610c54565b80610f76610c71565b60030180546001600160a01b0319166001600160a01b039290921691909117905550565b6109ee81611527565b805160009081906001600160a01b03163014801590610fcb575082516001600160a01b03163b155b15610fe957604051633ddc5cab60e21b815260040160405180910390fd5b60005b8360400151518110156110d55760008460400151828151811061101157611011611a0b565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c1561105d57604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c199990991617978114156110c657600389901c600090815260028b0160205260408120989098555b50505060019586019501610fec565b5093959294509192505050565b80516001600160a01b03163b61110b57604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156112215760008260400151828151811061113357611133611a0b565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8061117f576040516337e25a9760e11b815260040160405180910390fd5b6001600160a01b0381163014156111a95760405163e983573160e01b815260040160405180910390fd5b84516001600160a01b03828116911614156111d7576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166bffffffffffffffffffffffff9190911617905560010161110e565b505050565b805160009081906001600160a01b03161561125457604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101561142f5760008660400151828151811061128557611285611a0b565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6112d0576040516337e25a9760e11b815260040160405180910390fd5b606081901c3014156112f55760405163e983573160e01b815260040160405180910390fd5b8861131d57600019909401600081815260028c01602052604090205498509360079350611325565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161461137c576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146113df57600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055611403565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8661141e57600088815260028f01602052604081208190559b505b505060019093019250611260915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151461146f576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b03821615611523576001600160a01b03821630146114b6576001600160a01b0382163b6114b657604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b0316826040516114d09190611b7c565b600060405180830381855af49150503d806000811461150b576040519150601f19603f3d011682016040523d82523d6000602084013e611510565b606091505b5050905080611221573d6000803e3d6000fd5b5050565b6109ee816109ee817f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610f67565b80356001600160e01b03198116811461156d57600080fd5b919050565b60006020828403121561158457600080fd5b61158d82611555565b9392505050565b80356001600160a01b038116811461156d57600080fd5b60008083601f8401126115bd57600080fd5b50813567ffffffffffffffff8111156115d557600080fd5b6020830191508360208285010111156115ed57600080fd5b9250929050565b60008060008060006060868803121561160c57600080fd5b853567ffffffffffffffff8082111561162457600080fd5b818801915088601f83011261163857600080fd5b81358181111561164757600080fd5b8960208260051b850101111561165c57600080fd5b6020830197508096505061167260208901611594565b9450604088013591508082111561168857600080fd5b50611695888289016115ab565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b818110156116e75783516001600160a01b0316835292840192918401916001016116c2565b50909695505050505050565b600081518084526020808501945080840160005b8381101561172d5781516001600160e01b03191687529582019590820190600101611707565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156117a757888303603f19018552815180516001600160a01b03168452870151878401879052611794878501826116f3565b958801959350509086019060010161175f565b509098975050505050505050565b6000602082840312156117c757600080fd5b61158d82611594565b6020808252825182820181905260009190848201906040850190845b818110156116e75783516001600160e01b031916835292840192918401916001016117ec565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561184b5761184b611812565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561187a5761187a611812565b604052919050565b600067ffffffffffffffff82111561189c5761189c611812565b5060051b60200190565b60006118b96118b484611882565b611851565b83815260208082019190600586811b8601368111156118d757600080fd5b865b818110156119cd57803567ffffffffffffffff808211156118fa5760008081fd5b818a019150606082360312156119105760008081fd5b611918611828565b61192183611594565b815286830135600381106119355760008081fd5b818801526040838101358381111561194d5760008081fd5b939093019236601f85011261196457600092508283fd5b833592506119746118b484611882565b83815292871b840188019288810190368511156119915760008081fd5b948901945b848610156119b6576119a786611555565b82529489019490890190611996565b9183019190915250885250509483019483016118d9565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611a0457611a046119da565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415611a3857611a386119da565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015611a72578181015183820152602001611a5a565b83811115611a81576000848401525b50505050565b60008151808452611a9f816020860160208601611a57565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015611b4c57898703607f19018652825180516001600160a01b031688528481015160038110611b1d57634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052611b39898901826116f3565b9750509483019491830191600101611add565b5050506001600160a01b0389169087015250508381036040850152611b718186611a87565b979650505050505050565b60008251611b8e818460208701611a57565b919091019291505056fea26469706673582212201d2622880e4d1b7b723511071f5d415a1629cbec6de4b70a13d7bb271d6824e564736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c80638ab5150a116100645780638ab5150a146101e75780638da5cb5b146101fc5780639142376514610211578063adfca15e14610231578063cdffacc61461025e578063f2fde38b1461027e576100b2565b806301ffc9a71461010a5780631f931c1c1461013f5780632c4080591461016157806352ef6b2c1461018e57806379ba5097146101b05780637a0ed627146101c5576100b2565b366100b257005b60006100bc61029e565b90506001600160a01b0381163b6100e6576040516321f27f0d60e21b815260040160405180910390fd5b3660008037600080366000845af43d6000803e808015610105573d6000f35b3d6000fd5b34801561011657600080fd5b5061012a610125366004611572565b6102b3565b60405190151581526020015b60405180910390f35b34801561014b57600080fd5b5061015f61015a3660046115f4565b6102e8565b005b34801561016d57600080fd5b50610176610372565b6040516001600160a01b039091168152602001610136565b34801561019a57600080fd5b506101a361037c565b60405161013691906116a6565b3480156101bc57600080fd5b5061015f610526565b3480156101d157600080fd5b506101da610569565b6040516101369190611738565b3480156101f357600080fd5b50610176610998565b34801561020857600080fd5b506101766109a2565b34801561021d57600080fd5b5061015f61022c3660046117b5565b6109ac565b34801561023d57600080fd5b5061025161024c3660046117b5565b6109f1565b60405161013691906117d0565b34801561026a57600080fd5b50610176610279366004611572565b610b44565b34801561028a57600080fd5b5061015f6102993660046117b5565b610b71565b60006102a8610c95565b905090565b3b151590565b60006102e2826102c1610bb3565b906001600160e01b0319166000908152602091909152604090205460ff1690565b92915050565b6102f0610ce1565b6001600160a01b0316336001600160a01b03161461032157604051632f7a8ee160e01b815260040160405180910390fd5b61036b61032e85876118a6565b8484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cfa92505050565b5050505050565b60006102a8610eac565b60606000610388610c71565b600181015490915061ffff1667ffffffffffffffff8111156103ac576103ac611812565b6040519080825280602002602001820160405280156103d5578160200160208202803683370190505b50915060008060005b600184015461ffff1682101561051e576000818152600285016020526040812054905b60088110156105095783610414816119f0565b600188015490955061ffff16851115905061042e57610509565b600581901b82901b6001600160e01b0319811660009081526020889052604081205460601c90805b888110156104ac578a818151811061047057610470611a0b565b60200260200101516001600160a01b0316836001600160a01b0316141561049a57600191506104ac565b806104a4816119f0565b915050610456565b5080156104bb575050506104f7565b818a89815181106104ce576104ce611a0b565b6001600160a01b0390921660209283029190910190910152876104f0816119f0565b9850505050505b80610501816119f0565b915050610401565b50508080610516906119f0565b9150506103de565b505082525090565b61052e610ec8565b6001600160a01b0316336001600160a01b03161461055f5760405163efd1052d60e01b815260040160405180910390fd5b610567610ef0565b565b60606000610575610c71565b600181015490915061ffff1667ffffffffffffffff81111561059957610599611812565b6040519080825280602002602001820160405280156105df57816020015b6040805180820190915260008152606060208201528152602001906001900390816105b75790505b50600182015490925060009061ffff1667ffffffffffffffff81111561060757610607611812565b604051908082528060200260200182016040528015610630578160200160208202803683370190505b50905060008060005b600185015461ffff16821015610926576000818152600286016020526040812054905b6008811015610911578361066f816119f0565b600189015490955061ffff16851115905061068957610911565b600581901b82901b6001600160e01b0319811660009081526020899052604081205460601c90805b888110156107cf57826001600160a01b03168c82815181106106d5576106d5611a0b565b6020026020010151600001516001600160a01b031614156107bd57838c828151811061070357610703611a0b565b6020026020010151602001518b838151811061072157610721611a0b565b602002602001015160ff168151811061073c5761073c611a0b565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060ff8a828151811061077257610772611a0b565b602002602001015160ff161061078757600080fd5b89818151811061079957610799611a0b565b6020026020010180518091906107ae90611a21565b60ff16905250600191506107cf565b806107c7816119f0565b9150506106b1565b5080156107de575050506108ff565b818b89815181106107f1576107f1611a0b565b60209081029190910101516001600160a01b03909116905260018a015461ffff1667ffffffffffffffff81111561082a5761082a611812565b604051908082528060200260200182016040528015610853578160200160208202803683370190505b508b898151811061086657610866611a0b565b602002602001015160200181905250828b898151811061088857610888611a0b565b6020026020010151602001516000815181106108a6576108a6611a0b565b60200260200101906001600160e01b03191690816001600160e01b0319168152505060018989815181106108dc576108dc611a0b565b60ff90921660209283029190910190910152876108f8816119f0565b9850505050505b80610909816119f0565b91505061065c565b5050808061091e906119f0565b915050610639565b5060005b8281101561098d57600084828151811061094657610946611a0b565b602002602001015160ff169050600087838151811061096757610967611a0b565b602002602001015160200151905081815250508080610985906119f0565b91505061092a565b508185525050505090565b60006102a8610ec8565b60006102a8610ce1565b6109b4610ce1565b6001600160a01b0316336001600160a01b0316146109e557604051632f7a8ee160e01b815260040160405180910390fd5b6109ee81610f6d565b50565b606060006109fd610c71565b600181015490915061ffff1667ffffffffffffffff811115610a2157610a21611812565b604051908082528060200260200182016040528015610a4a578160200160208202803683370190505b50915060008060005b600184015461ffff16821015610b3a576000818152600285016020526040812054905b6008811015610b255783610a89816119f0565b600188015490955061ffff168511159050610aa357610b25565b600581901b82901b6001600160e01b0319811660009081526020889052604090205460601c6001600160a01b038a161415610b125780888781518110610aeb57610aeb611a0b565b6001600160e01b03199092166020928302919091019091015285610b0e816119f0565b9650505b5080610b1d816119f0565b915050610a76565b50508080610b32906119f0565b915050610a53565b5050825250919050565b6000610b4e610c71565b6001600160e01b0319909216600090815260209290925250604090205460601c90565b610b79610ce1565b6001600160a01b0316336001600160a01b031614610baa57604051632f7a8ee160e01b815260040160405180910390fd5b6109ee81610f9a565b7f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590565b6001600160e01b03198083161415610c025760405163f31e8ca960e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b7f8a22373512790c48b83a1fe2efdd2888d4a917bcdc24d0adf63e60f67168046090565b81546001600160a01b0319166001600160a01b0391909116179055565b7f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc9390565b600080356001600160e01b03191681527f177481ac65e4292921c69f62d1cc7f57541261e5d61c8175cf4e36a01c9bfc93602052604090205460601c80610cde576102a8610eac565b90565b6000610ceb610c30565b546001600160a01b0316919050565b6000610d04610c71565b600181015490915061ffff811690819060009060071615610d375750600381901c60009081526002840160205260409020545b60005b8751811015610e20576000888281518110610d5757610d57611a0b565b6020026020010151905060008160200151905081604001515160001415610d915760405163eb6c3aeb60e01b815260040160405180910390fd5b6000816002811115610da557610da5611a41565b1415610dc157610db787868685610fa3565b9095509350610e16565b6001816002811115610dd557610dd5611a41565b1415610dea57610de587836110e2565b610e16565b6002816002811115610dfe57610dfe611a41565b1415610e1657610e1087868685611226565b90955093505b5050600101610d3a565b50828214610e3c5760018401805461ffff191661ffff84161790555b6007821615610e5e57600382901c600090815260028501602052604090208190555b7f8faa70878671ccd212d20771b795c50af8fd3ff6cf27f4bde57e5d4de0aeb673878787604051610e9193929190611ab3565b60405180910390a1610ea38686611443565b50505050505050565b6000610eb6610c71565b600301546001600160a01b0316919050565b60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610ceb565b6000610efa610c30565b805460405191925033916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3610f408133610c54565b6109ee60007f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce66178905b90610c54565b80610f76610c71565b60030180546001600160a01b0319166001600160a01b039290921691909117905550565b6109ee81611527565b805160009081906001600160a01b03163014801590610fcb575082516001600160a01b03163b155b15610fe957604051633ddc5cab60e21b815260040160405180910390fd5b60005b8360400151518110156110d55760008460400151828151811061101157611011611a0b565b6020908102919091018101516001600160e01b031981166000908152918a9052604090912054909150606081901c1561105d57604051634923a77160e11b815260040160405180910390fd5b85516001600160e01b0319838116600081815260208d90526040902060609390931b6001600160601b0319168b1790925560058a901b60e090811692831c91831c199990991617978114156110c657600389901c600090815260028b0160205260408120989098555b50505060019586019501610fec565b5093959294509192505050565b80516001600160a01b03163b61110b57604051633ddc5cab60e21b815260040160405180910390fd5b60005b8160400151518110156112215760008260400151828151811061113357611133611a0b565b6020908102919091018101516001600160e01b03198116600090815291869052604090912054909150606081901c8061117f576040516337e25a9760e11b815260040160405180910390fd5b6001600160a01b0381163014156111a95760405163e983573160e01b815260040160405180910390fd5b84516001600160a01b03828116911614156111d7576040516330baabf360e11b815260040160405180910390fd5b5083516001600160e01b031992909216600090815260208690526040902060609290921b6001600160601b0319166bffffffffffffffffffffffff9190911617905560010161110e565b505050565b805160009081906001600160a01b03161561125457604051633ab3490960e21b815260040160405180910390fd5b600385901c6007861660005b85604001515181101561142f5760008660400151828151811061128557611285611a0b565b6020908102919091018101516001600160e01b031981166000908152918c9052604090912054909150606081901c6112d0576040516337e25a9760e11b815260040160405180910390fd5b606081901c3014156112f55760405163e983573160e01b815260040160405180910390fd5b8861131d57600019909401600081815260028c01602052604090205498509360079350611325565b600019909301925b600584901b89901b6000806001600160e01b03198084169086161461137c576001600160e01b03198316600090815260208f90526040902080546001600160601b0319166bffffffffffffffffffffffff86161790555b50506001600160e01b03198316600090815260208d90526040812055611fff600383901c1660e0600584901b168782146113df57600082815260028f016020526040902080546001600160e01b031980841c19909116908516831c179055611403565b80836001600160e01b031916901c816001600160e01b031960001b901c198d16179b505b8661141e57600088815260028f01602052604081208190559b505b505060019093019250611260915050565b5060039190911b1796939550929350505050565b8051156001600160a01b038316151461146f576040516326df4ccd60e01b815260040160405180910390fd5b6001600160a01b03821615611523576001600160a01b03821630146114b6576001600160a01b0382163b6114b657604051633ddc5cab60e21b815260040160405180910390fd5b6000826001600160a01b0316826040516114d09190611b7c565b600060405180830381855af49150503d806000811461150b576040519150601f19603f3d011682016040523d82523d6000602084013e611510565b606091505b5050905080611221573d6000803e3d6000fd5b5050565b6109ee816109ee817f24aa1f7b31fd188a8d3ecfb06bc55c806040e59b03bd4396283442fce6617890610f67565b80356001600160e01b03198116811461156d57600080fd5b919050565b60006020828403121561158457600080fd5b61158d82611555565b9392505050565b80356001600160a01b038116811461156d57600080fd5b60008083601f8401126115bd57600080fd5b50813567ffffffffffffffff8111156115d557600080fd5b6020830191508360208285010111156115ed57600080fd5b9250929050565b60008060008060006060868803121561160c57600080fd5b853567ffffffffffffffff8082111561162457600080fd5b818801915088601f83011261163857600080fd5b81358181111561164757600080fd5b8960208260051b850101111561165c57600080fd5b6020830197508096505061167260208901611594565b9450604088013591508082111561168857600080fd5b50611695888289016115ab565b969995985093965092949392505050565b6020808252825182820181905260009190848201906040850190845b818110156116e75783516001600160a01b0316835292840192918401916001016116c2565b50909695505050505050565b600081518084526020808501945080840160005b8381101561172d5781516001600160e01b03191687529582019590820190600101611707565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156117a757888303603f19018552815180516001600160a01b03168452870151878401879052611794878501826116f3565b958801959350509086019060010161175f565b509098975050505050505050565b6000602082840312156117c757600080fd5b61158d82611594565b6020808252825182820181905260009190848201906040850190845b818110156116e75783516001600160e01b031916835292840192918401916001016117ec565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561184b5761184b611812565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561187a5761187a611812565b604052919050565b600067ffffffffffffffff82111561189c5761189c611812565b5060051b60200190565b60006118b96118b484611882565b611851565b83815260208082019190600586811b8601368111156118d757600080fd5b865b818110156119cd57803567ffffffffffffffff808211156118fa5760008081fd5b818a019150606082360312156119105760008081fd5b611918611828565b61192183611594565b815286830135600381106119355760008081fd5b818801526040838101358381111561194d5760008081fd5b939093019236601f85011261196457600092508283fd5b833592506119746118b484611882565b83815292871b840188019288810190368511156119915760008081fd5b948901945b848610156119b6576119a786611555565b82529489019490890190611996565b9183019190915250885250509483019483016118d9565b5092979650505050505050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611a0457611a046119da565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff811415611a3857611a386119da565b60010192915050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015611a72578181015183820152602001611a5a565b83811115611a81576000848401525b50505050565b60008151808452611a9f816020860160208601611a57565b601f01601f19169290920160200192915050565b6000606080830181845280875180835260808601915060808160051b87010192506020808a016000805b84811015611b4c57898703607f19018652825180516001600160a01b031688528481015160038110611b1d57634e487b7160e01b84526021600452602484fd5b88860152604090810151908801899052611b39898901826116f3565b9750509483019491830191600101611add565b5050506001600160a01b0389169087015250508381036040850152611b718186611a87565b979650505050505050565b60008251611b8e818460208701611a57565b919091019291505056fea26469706673582212201d2622880e4d1b7b723511071f5d415a1629cbec6de4b70a13d7bb271d6824e564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "params": {
          "data": "optional initialization function call data",
          "facetCuts": "array of structured Diamond facet update data",
          "target": "optional target of initialization delegatecall"
        }
      },
      "facetAddress(bytes4)": {
        "params": {
          "selector": "function selector to query"
        },
        "returns": {
          "facet": "facet address (zero address if not found)"
        }
      },
      "facetAddresses()": {
        "returns": {
          "addresses": "array of facet addresses"
        }
      },
      "facetFunctionSelectors(address)": {
        "params": {
          "facet": "address of facet to query"
        },
        "returns": {
          "selectors": "array of function selectors"
        }
      },
      "facets()": {
        "returns": {
          "diamondFacets": "array of structured facet data"
        }
      },
      "getFallbackAddress()": {
        "returns": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "owner()": {
        "returns": {
          "_0": "conrtact owner"
        }
      },
      "setFallbackAddress(address)": {
        "params": {
          "fallbackAddress": "address of fallback implementation"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "account": "address of new owner"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "accept transfer of contract ownership"
      },
      "diamondCut((address,uint8,bytes4[])[],address,bytes)": {
        "notice": "update diamond facets and optionally execute arbitrary initialization function"
      },
      "facetAddress(bytes4)": {
        "notice": "get the address of the facet associated with given selector"
      },
      "facetAddresses()": {
        "notice": "get addresses of all facets used by diamond"
      },
      "facetFunctionSelectors(address)": {
        "notice": "get all selectors for given facet address"
      },
      "facets()": {
        "notice": "get all facets and their selectors"
      },
      "getFallbackAddress()": {
        "notice": "query the address of the fallback implementation"
      },
      "nomineeOwner()": {
        "notice": "get the nominated owner who has permission to call acceptOwnership"
      },
      "owner()": {
        "notice": "get the ERC173 contract owner"
      },
      "setFallbackAddress(address)": {
        "notice": "set the address of the fallback implementation"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "transferOwnership(address)": {
        "notice": "transfer contract ownership to new account"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}